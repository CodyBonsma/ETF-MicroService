function cov_amds0kff5(){var path="C:\\Users\\cbonsma\\Desktop\\PA-Cohort\\Projects\\ETF-Micro\\models\\index.js";var hash="9edf440351cab50b1ecc035b012475137482cb30";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\cbonsma\\Desktop\\PA-Cohort\\Projects\\ETF-Micro\\models\\index.js",statementMap:{"0":{start:{line:2,column:17},end:{line:2,column:46}},"1":{start:{line:5,column:33},end:{line:5,column:53}},"2":{start:{line:8,column:16},end:{line:8,column:20}},"3":{start:{line:9,column:4},end:{line:42,column:5}},"4":{start:{line:10,column:8},end:{line:23,column:10}},"5":{start:{line:25,column:7},end:{line:41,column:10}},"6":{start:{line:45,column:0},end:{line:49,column:3}},"7":{start:{line:46,column:4},end:{line:46,column:42}},"8":{start:{line:48,column:4},end:{line:48,column:55}},"9":{start:{line:52,column:11},end:{line:52,column:13}},"10":{start:{line:55,column:0},end:{line:55,column:25}},"11":{start:{line:58,column:0},end:{line:58,column:53}},"12":{start:{line:59,column:12},end:{line:59,column:33}},"13":{start:{line:61,column:0},end:{line:61,column:62}},"14":{start:{line:62,column:16},end:{line:62,column:41}},"15":{start:{line:64,column:0},end:{line:64,column:56}},"16":{start:{line:68,column:0},end:{line:72,column:3}},"17":{start:{line:69,column:4},end:{line:69,column:43}},"18":{start:{line:71,column:4},end:{line:71,column:58}},"19":{start:{line:74,column:0},end:{line:74,column:58}},"20":{start:{line:75,column:0},end:{line:75,column:30}},"21":{start:{line:77,column:0},end:{line:77,column:20}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:45,column:30},end:{line:45,column:31}},loc:{start:{line:45,column:36},end:{line:47,column:1}},line:45},"1":{name:"(anonymous_1)",decl:{start:{line:47,column:9},end:{line:47,column:10}},loc:{start:{line:47,column:16},end:{line:49,column:1}},line:47},"2":{name:"(anonymous_2)",decl:{start:{line:68,column:39},end:{line:68,column:40}},loc:{start:{line:68,column:45},end:{line:70,column:1}},line:68},"3":{name:"(anonymous_3)",decl:{start:{line:70,column:9},end:{line:70,column:10}},loc:{start:{line:70,column:18},end:{line:72,column:1}},line:70}},branchMap:{"0":{loc:{start:{line:9,column:4},end:{line:42,column:5}},type:"if",locations:[{start:{line:9,column:4},end:{line:42,column:5}},{start:{line:9,column:4},end:{line:42,column:5}}],line:9},"1":{loc:{start:{line:9,column:8},end:{line:9,column:43}},type:"binary-expr",locations:[{start:{line:9,column:8},end:{line:9,column:15}},{start:{line:9,column:19},end:{line:9,column:43}}],line:9}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"9edf440351cab50b1ecc035b012475137482cb30"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_amds0kff5=function(){return actualCoverage;};}return actualCoverage;}cov_amds0kff5();// require the db configuration form the dbConfig file
const dbConfig=(cov_amds0kff5().s[0]++,require('../config/dbConfig'));// require the sequelize constructor and datatypes from the sequelize module
const{Sequelize,DataTypes}=(cov_amds0kff5().s[1]++,require('sequelize'));// construct the sequelize object using the constructor
let sequelize=(cov_amds0kff5().s[2]++,null);cov_amds0kff5().s[3]++;if((cov_amds0kff5().b[1][0]++,process)&&(cov_amds0kff5().b[1][1]++,process.env.DATABASE_URL)){cov_amds0kff5().b[0][0]++;cov_amds0kff5().s[4]++;sequelize=new Sequelize(process.env.DATABASE_URL,{dialect:'postgres',protocol:'postgres',dialectOptions:{ssl:{require:true,rejectUnauthorized:false}},define:{timestamps:false}});}else{cov_amds0kff5().b[0][1]++;cov_amds0kff5().s[5]++;sequelize=new Sequelize({// use imported configurations from dbConfig
database:dbConfig.DB,username:dbConfig.USER,password:dbConfig.PASSWORD,dialect:dbConfig.dialect,host:dbConfig.HOST,dialectOptions:{ssl:{require:true,rejectUnauthorized:false}},define:{timestamps:false}});}// authenticate will test the connection with DB and return a promise
cov_amds0kff5().s[6]++;sequelize.authenticate().then(()=>{cov_amds0kff5().f[0]++;cov_amds0kff5().s[7]++;console.log('connected to postgresDB');}).catch(e=>{cov_amds0kff5().f[1]++;cov_amds0kff5().s[8]++;console.log('unable to connect to postgres DB'+e);});// create a db object to work with the sequelize table
const db=(cov_amds0kff5().s[9]++,{});// create an attribute storing the previously created sequelized instance
cov_amds0kff5().s[10]++;db.sequelize=sequelize;// get ETF model 
cov_amds0kff5().s[11]++;db.ETF=require('./etfModel')(sequelize,DataTypes);const ETF=(cov_amds0kff5().s[12]++,require('./etfModel'));cov_amds0kff5().s[13]++;db.Holdings=require('./holdingModel')(sequelize,DataTypes);const Holding=(cov_amds0kff5().s[14]++,require('./holdingModel'));cov_amds0kff5().s[15]++;db.Users=require('./userModel')(sequelize,DataTypes);// sync the db by running the model
// 'force: false' ensures that the table is not created again everytime the program runs
cov_amds0kff5().s[16]++;db.sequelize.sync({force:false}).then(()=>{cov_amds0kff5().f[2]++;cov_amds0kff5().s[17]++;console.log('DB synced with sequelize');}).catch(err=>{cov_amds0kff5().f[3]++;cov_amds0kff5().s[18]++;console.log('Error syncing the DB to sequelize'+err);});cov_amds0kff5().s[19]++;db.ETF.belongsToMany(db.Holdings,{through:db.Holdings});cov_amds0kff5().s[20]++;db.Holdings.belongsTo(db.ETF);cov_amds0kff5().s[21]++;module.exports=db;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImRiQ29uZmlnIiwicmVxdWlyZSIsIlNlcXVlbGl6ZSIsIkRhdGFUeXBlcyIsInNlcXVlbGl6ZSIsInByb2Nlc3MiLCJlbnYiLCJEQVRBQkFTRV9VUkwiLCJkaWFsZWN0IiwicHJvdG9jb2wiLCJkaWFsZWN0T3B0aW9ucyIsInNzbCIsInJlamVjdFVuYXV0aG9yaXplZCIsImRlZmluZSIsInRpbWVzdGFtcHMiLCJkYXRhYmFzZSIsIkRCIiwidXNlcm5hbWUiLCJVU0VSIiwicGFzc3dvcmQiLCJQQVNTV09SRCIsImhvc3QiLCJIT1NUIiwiYXV0aGVudGljYXRlIiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImUiLCJkYiIsIkVURiIsIkhvbGRpbmdzIiwiSG9sZGluZyIsIlVzZXJzIiwic3luYyIsImZvcmNlIiwiZXJyIiwiYmVsb25nc1RvTWFueSIsInRocm91Z2giLCJiZWxvbmdzVG8iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoieThGQWVZO3lGQWZaO0FBQ0EsS0FBTUEsQ0FBQUEsUUFBUSx5QkFBR0MsT0FBTyxDQUFDLG9CQUFELENBQVYsQ0FBZCxDQUVBO0FBQ0EsS0FBTSxDQUFFQyxTQUFGLENBQWFDLFNBQWIsMEJBQTJCRixPQUFPLENBQUMsV0FBRCxDQUFsQyxDQUFOLENBRUE7QUFDQSxHQUFJRyxDQUFBQSxTQUFTLHlCQUFHLElBQUgsQ0FBYixDLHVCQUNJLEdBQUksMkJBQUFDLE9BQU8sOEJBQUlBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxZQUFoQixDQUFYLENBQXlDLGtEQUNyQ0gsU0FBUyxDQUFHLEdBQUlGLENBQUFBLFNBQUosQ0FBY0csT0FBTyxDQUFDQyxHQUFSLENBQVlDLFlBQTFCLENBQXdDLENBQ2hEQyxPQUFPLENBQUUsVUFEdUMsQ0FFaERDLFFBQVEsQ0FBRSxVQUZzQyxDQUdoREMsY0FBYyxDQUFFLENBQ2RDLEdBQUcsQ0FBRSxDQUNEVixPQUFPLENBQUUsSUFEUixDQUVEVyxrQkFBa0IsQ0FBRSxLQUZuQixDQURTLENBSGdDLENBUzlDQyxNQUFNLENBQUUsQ0FDSkMsVUFBVSxDQUFFLEtBRFIsQ0FUc0MsQ0FBeEMsQ0FBWixDQWNILENBZkQsSUFlTyxrREFDSlYsU0FBUyxDQUFHLEdBQUlGLENBQUFBLFNBQUosQ0FDWCxDQUFFO0FBQ0VhLFFBQVEsQ0FBRWYsUUFBUSxDQUFDZ0IsRUFEdkIsQ0FFSUMsUUFBUSxDQUFFakIsUUFBUSxDQUFDa0IsSUFGdkIsQ0FHSUMsUUFBUSxDQUFFbkIsUUFBUSxDQUFDb0IsUUFIdkIsQ0FJSVosT0FBTyxDQUFFUixRQUFRLENBQUNRLE9BSnRCLENBS0lhLElBQUksQ0FBRXJCLFFBQVEsQ0FBQ3NCLElBTG5CLENBTUlaLGNBQWMsQ0FBRSxDQUNkQyxHQUFHLENBQUUsQ0FDSFYsT0FBTyxDQUFFLElBRE4sQ0FFSFcsa0JBQWtCLENBQUUsS0FGakIsQ0FEUyxDQU5wQixDQVlJQyxNQUFNLENBQUUsQ0FDSkMsVUFBVSxDQUFFLEtBRFIsQ0FaWixDQURXLENBQVosQ0FpQkYsQ0FFTDt1QkFDQVYsU0FBUyxDQUFDbUIsWUFBVixHQUF5QkMsSUFBekIsQ0FBOEIsSUFBTSwrQ0FDaENDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHlCQUFaLEVBQ0gsQ0FGRCxFQUVHQyxLQUZILENBRVVDLENBQUQsRUFBTywrQ0FDWkgsT0FBTyxDQUFDQyxHQUFSLENBQVksbUNBQXFDRSxDQUFqRCxFQUNILENBSkQsRUFNQTtBQUNBLEtBQU1DLENBQUFBLEVBQUUseUJBQUcsRUFBSCxDQUFSLENBRUE7d0JBQ0FBLEVBQUUsQ0FBQ3pCLFNBQUgsQ0FBZUEsU0FBZixDQUVBO3dCQUNBeUIsRUFBRSxDQUFDQyxHQUFILENBQVM3QixPQUFPLENBQUMsWUFBRCxDQUFQLENBQXNCRyxTQUF0QixDQUFpQ0QsU0FBakMsQ0FBVCxDQUNBLEtBQU0yQixDQUFBQSxHQUFHLDBCQUFHN0IsT0FBTyxDQUFDLFlBQUQsQ0FBVixDQUFULEMsd0JBRUE0QixFQUFFLENBQUNFLFFBQUgsQ0FBYzlCLE9BQU8sQ0FBQyxnQkFBRCxDQUFQLENBQTBCRyxTQUExQixDQUFxQ0QsU0FBckMsQ0FBZCxDQUNBLEtBQU02QixDQUFBQSxPQUFPLDBCQUFHL0IsT0FBTyxDQUFDLGdCQUFELENBQVYsQ0FBYixDLHdCQUVBNEIsRUFBRSxDQUFDSSxLQUFILENBQVdoQyxPQUFPLENBQUMsYUFBRCxDQUFQLENBQXVCRyxTQUF2QixDQUFrQ0QsU0FBbEMsQ0FBWCxDQUVBO0FBQ0E7d0JBQ0EwQixFQUFFLENBQUN6QixTQUFILENBQWE4QixJQUFiLENBQWtCLENBQUNDLEtBQUssQ0FBRSxLQUFSLENBQWxCLEVBQWtDWCxJQUFsQyxDQUF1QyxJQUFNLGdEQUN6Q0MsT0FBTyxDQUFDQyxHQUFSLENBQVksMEJBQVosRUFDSCxDQUZELEVBRUdDLEtBRkgsQ0FFVVMsR0FBRCxFQUFTLGdEQUNkWCxPQUFPLENBQUNDLEdBQVIsQ0FBWSxvQ0FBc0NVLEdBQWxELEVBQ0gsQ0FKRCxFLHdCQU1BUCxFQUFFLENBQUNDLEdBQUgsQ0FBT08sYUFBUCxDQUFxQlIsRUFBRSxDQUFDRSxRQUF4QixDQUFrQyxDQUFDTyxPQUFPLENBQUVULEVBQUUsQ0FBQ0UsUUFBYixDQUFsQyxFLHdCQUNBRixFQUFFLENBQUNFLFFBQUgsQ0FBWVEsU0FBWixDQUFzQlYsRUFBRSxDQUFDQyxHQUF6QixFLHdCQUVBVSxNQUFNLENBQUNDLE9BQVAsQ0FBaUJaLEVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVxdWlyZSB0aGUgZGIgY29uZmlndXJhdGlvbiBmb3JtIHRoZSBkYkNvbmZpZyBmaWxlXHJcbmNvbnN0IGRiQ29uZmlnID0gcmVxdWlyZSgnLi4vY29uZmlnL2RiQ29uZmlnJyk7XHJcblxyXG4vLyByZXF1aXJlIHRoZSBzZXF1ZWxpemUgY29uc3RydWN0b3IgYW5kIGRhdGF0eXBlcyBmcm9tIHRoZSBzZXF1ZWxpemUgbW9kdWxlXHJcbmNvbnN0IHsgU2VxdWVsaXplLCBEYXRhVHlwZXMgfSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpO1xyXG5cclxuLy8gY29uc3RydWN0IHRoZSBzZXF1ZWxpemUgb2JqZWN0IHVzaW5nIHRoZSBjb25zdHJ1Y3RvclxyXG5sZXQgc2VxdWVsaXplID0gbnVsbDtcclxuICAgIGlmIChwcm9jZXNzICYmIHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTCkge1xyXG4gICAgICAgIHNlcXVlbGl6ZSA9IG5ldyBTZXF1ZWxpemUocHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMLCB7XHJcbiAgICAgICAgICAgIGRpYWxlY3Q6ICdwb3N0Z3JlcycsXHJcbiAgICAgICAgICAgIHByb3RvY29sOiAncG9zdGdyZXMnLFxyXG4gICAgICAgICAgICBkaWFsZWN0T3B0aW9uczoge1xyXG4gICAgICAgICAgICAgIHNzbDoge1xyXG4gICAgICAgICAgICAgICAgICByZXF1aXJlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICByZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGRlZmluZToge1xyXG4gICAgICAgICAgICAgICAgICB0aW1lc3RhbXBzOiBmYWxzZVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgc2VxdWVsaXplID0gbmV3IFNlcXVlbGl6ZShcclxuICAgICAgICB7IC8vIHVzZSBpbXBvcnRlZCBjb25maWd1cmF0aW9ucyBmcm9tIGRiQ29uZmlnXHJcbiAgICAgICAgICAgIGRhdGFiYXNlOiBkYkNvbmZpZy5EQixcclxuICAgICAgICAgICAgdXNlcm5hbWU6IGRiQ29uZmlnLlVTRVIsXHJcbiAgICAgICAgICAgIHBhc3N3b3JkOiBkYkNvbmZpZy5QQVNTV09SRCxcclxuICAgICAgICAgICAgZGlhbGVjdDogZGJDb25maWcuZGlhbGVjdCxcclxuICAgICAgICAgICAgaG9zdDogZGJDb25maWcuSE9TVCxcclxuICAgICAgICAgICAgZGlhbGVjdE9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICBzc2w6IHtcclxuICAgICAgICAgICAgICAgIHJlcXVpcmU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZWZpbmU6IHtcclxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcHM6IGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuLy8gYXV0aGVudGljYXRlIHdpbGwgdGVzdCB0aGUgY29ubmVjdGlvbiB3aXRoIERCIGFuZCByZXR1cm4gYSBwcm9taXNlXHJcbnNlcXVlbGl6ZS5hdXRoZW50aWNhdGUoKS50aGVuKCgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdjb25uZWN0ZWQgdG8gcG9zdGdyZXNEQicpXHJcbn0pLmNhdGNoKChlKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygndW5hYmxlIHRvIGNvbm5lY3QgdG8gcG9zdGdyZXMgREInICsgZSlcclxufSk7XHJcblxyXG4vLyBjcmVhdGUgYSBkYiBvYmplY3QgdG8gd29yayB3aXRoIHRoZSBzZXF1ZWxpemUgdGFibGVcclxuY29uc3QgZGIgPSB7fTtcclxuXHJcbi8vIGNyZWF0ZSBhbiBhdHRyaWJ1dGUgc3RvcmluZyB0aGUgcHJldmlvdXNseSBjcmVhdGVkIHNlcXVlbGl6ZWQgaW5zdGFuY2VcclxuZGIuc2VxdWVsaXplID0gc2VxdWVsaXplO1xyXG5cclxuLy8gZ2V0IEVURiBtb2RlbCBcclxuZGIuRVRGID0gcmVxdWlyZSgnLi9ldGZNb2RlbCcpKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKTtcclxuY29uc3QgRVRGID0gcmVxdWlyZSgnLi9ldGZNb2RlbCcpO1xyXG5cclxuZGIuSG9sZGluZ3MgPSByZXF1aXJlKCcuL2hvbGRpbmdNb2RlbCcpKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKTtcclxuY29uc3QgSG9sZGluZyA9IHJlcXVpcmUoJy4vaG9sZGluZ01vZGVsJyk7XHJcblxyXG5kYi5Vc2VycyA9IHJlcXVpcmUoJy4vdXNlck1vZGVsJykoc2VxdWVsaXplLCBEYXRhVHlwZXMpO1xyXG5cclxuLy8gc3luYyB0aGUgZGIgYnkgcnVubmluZyB0aGUgbW9kZWxcclxuLy8gJ2ZvcmNlOiBmYWxzZScgZW5zdXJlcyB0aGF0IHRoZSB0YWJsZSBpcyBub3QgY3JlYXRlZCBhZ2FpbiBldmVyeXRpbWUgdGhlIHByb2dyYW0gcnVuc1xyXG5kYi5zZXF1ZWxpemUuc3luYyh7Zm9yY2U6IGZhbHNlfSkudGhlbigoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnREIgc3luY2VkIHdpdGggc2VxdWVsaXplJylcclxufSkuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ0Vycm9yIHN5bmNpbmcgdGhlIERCIHRvIHNlcXVlbGl6ZScgKyBlcnIpXHJcbn0pO1xyXG5cclxuZGIuRVRGLmJlbG9uZ3NUb01hbnkoZGIuSG9sZGluZ3MsIHt0aHJvdWdoOiBkYi5Ib2xkaW5nc30pO1xyXG5kYi5Ib2xkaW5ncy5iZWxvbmdzVG8oZGIuRVRGKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZGI7Il19